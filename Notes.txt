SQL Concepts:
-------------

Distinct needs to go immediately after the SELECT.

There is no SQL command to define the column ordering.

DATEDIFF(day, '2011/08/25', '2017/08/25') -> 2192

If we want to get float or Decimal output, Either our denominator or Numerator should be float or decimal type. (MS SQL Server) -> 4/ CAST(3 as float)

We cannot use a function which includes any DML operations - {Insert, Update, Delete} in select statement.


In order to count NULL values of a column
//
SELECT SUM(CASE WHEN Title is null THEN 1 ELSE 0 END) 
AS [Number Of Null Values] 
    , COUNT(Title) AS [Number Of Non-Null Values] 
    FROM Person.Person

* SET ANSI_NULLS ON // any comparison or calculation performed with NULL values result must be NULL

    - This restricts comparison of (--- = NULL)
    - This can be disabled by setting the parameter OFF

* IS NULL / IS NOT NULL

* count(<column_name>)   // Count() Doesn't include NULL values

* Exec sp_helptext <<spGetEmp>>; -- Helps to find the command used in db object



Basics:

DDL - Define,modify structure of db (create, alter, drop, truncate)
DML - perform operations on data in db (insert, update, delete, merge)
DCL - set of commands helps in managing security & access privileges (Grant/Revoke)
TCL - In managing transactions in db (Commit,Rollback,Savepoint)
DQL - SELECT 

SAVEPOINT SAVEPOINT_NAME;  // Mark a transaction in a relation - a state in the set of transactions
RELEASE SAVEPOINT SAVEPOINT_NAME;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CASE statement - Similar to IF-ELSE statements which go through multiple conditions one after the other and fetch particular value based on certain condition

select OrderID, count(Quantity) as prod_count,
CASE WHEN count(Quantity) >= 5 THEN "Multiple Products"
	 WHEN count(Quantity) > 2 THEN "Dual Products"
     WHEN count(Quantity) >= 1 THEN "Single Product!"
     ELSE "No Product!!!"
     END
AS Quantity_Description
from OrderDetails group by OrderID;


SELECT CustomerName, City, Country FROM Customers
ORDER BY (CASE
WHEN City IS NULL THEN Country
ELSE City
END);

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

UNION : combine two different SQL Queries. Duplicate records would not be returned.

    * Both queries must return same same no of columns.
    * The columns in both the queries must be in same order.
    * Data type of all the columns in both the queries must be same.

Aggregate function: can be used to perform calculation on a set of values, which will then return a single value
    
    * SUM, AVG, COUNT, MIN, MAX

Type Conversion: CAST('31-01-2021' as DATE)   // MS SQL Server

SELECT SUBSTRING(full_name, 1, CHARINDEX(' ', full_name) - 1) as first_name;   // MS SQL Server

Sub Query: Select statement is used in another Select query statement. It may occur in any clause (select/from/where.)

        * SELECT * FROM continents ct WHERE ct.continent_code IN (SELECT cr.continent_code FROM countries cr);

    * Instead of using the same subquery multiple times, we can use "WITH" clause in sql.
    * We can place the subquery just once inside the WITH clause and then use this multiple times in our query.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SQL Query Tuning: 

    - check for joins
    - avoid repeated sub qiueries
    - use proper columns for index creation
    
    - Use updated statistics for the relations as it helps optimizer to generate best execution plan

* Unique Key can allow NULL values where as Primary Key will not allow NULL values.

* FOREIGN KEY constraint prevents invalid data from being inserted into the foreign key column, because it has to be one of the values contained in the parent table.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Views:

    - view is a virtual table (Doesn't store data) based on the result-set of an SQL statement
    - It may contains attributes from multiple tables as a part of the result set
    - A view always shows up-to-date data! (Accurate data from table). The database engine recreates the view, every time a user queries it.

Why Views? 
    * Security - We can just grant the access to a view to a user instaed of providing any details about the actual query.
    * Simplify the complex queries - Instead of re-writing complex query, we can work on views created for the complex query.

CREATE VIEW [Brazil Customers] AS
SELECT CustomerName, ContactName
FROM Customers
WHERE Country = 'Brazil';

select * from [Brazil Customers];

* A view can be updated with the "CREATE OR REPLACE VIEW" statement 

    * Rules to update a View:
        - Can't change column name
        - Can't change column type
        - Can't change order of columns
        - can add new columns at the end
    
    CREATE OR REPLACE VIEW [Brazil Customers] AS
    SELECT CustomerName, ContactName, City
    FROM Customers
    WHERE Country = 'Brazil';
    
    * Views hold the structure but doesn't consume the memory

    * To modify the structure of the view, we need to use the "ALTER VIEW" statement.

    * DROP view - To drop a view

    Scenario - 
        1. Table created -> View Created -> Table structure modified (change in column name/Extra column) -> View still points to old structure of the relation
        2. Use "CREATE OR REPLACE VIEW" statement to refresh the view so that view holds the recent structure
        3. It doesn't happen with data updates to table as views are concerned about just the structure.

*** Updatable Views *** - We can update the view which can update the data of the relation

    Rules:
    - Update can be possible only on 1 table/view
    - Update can't be performed if view has (DISTINCT, GROUP BY, WITH clauses, Window functions)


UPDATE expensive_products 
SET prod_name='Apple Pro 2', brand='Apple' 
where prod_id='P10';    // update the data in relation


*** WITH CHECK option *** - This helps in validating the data to be inserted into the relation through a view if an insertion is being performed from the view.

create view apple_products AS
SELECT * from tb_product_info where brand='Apple'
with check option; 

insert into apple_products values('P22','Note 1', 'Samsung', 2500, null);   --- This can't be inserted as we specified 'with check' option using condition (brand='Apple')


* A view is deleted with the DROP VIEW statement

DROP VIEW [Brazil Customers];

* contents or data of the "Materialized views" are periodically refreshed based on its configuration.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Synonym: Provides an alternative name for another database object, referred to as the base object, that can exist on a local or remote server.

- simplifying and shortening the database objects names
-- To reference a table from another server, we may need to use four-part named "Server1.GFG.Geeeksh.Geektab".
-- If the location of table were to change, for example, to another server, application would have to be modified to reflect that change.
* To address above issues, we can use synonyms in sql.
- A synonym belongs to a schema, and like other objects in a schema, the name of a synonym must be unique.

CREATE SYNONYM Geektable  
FOR Server1.GFG.Geeeksh.Geektab;  
GO

* Only synonym owners, members of db_owner, or members of db_ddladmin can grant permission on a synonym.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Keys in DBMS:

Key/SuperKey : Attribute or it's set which can uniquely identify each record of a relation
i.e.,   {sid,sname,smarks,sdept,scourse}

sid -> S.Key
{sid, sname} -> S.Key

Max possible Super Keys (5 attributes) = 5c1+5c2+5c3+5c4+5c5 = 31 (2^n-1)

* Super Key is just a theoretical concept

Candidate key: It is a "Super Key" whose proper subset (s2 C s1) is not a Super Key.

            * Minimal Super Key
            * If there exists a single attribute which is a super key, the proper subset of it will be null (Phi). It will be a candidate key. 

* Every candidate key is a super key but not every super keys is a candidate key.

* One of the candidate keys with no null values is considered as the primary key and remaining are considered as alternative keys.

Attribute Closure (X+) : Set of attributes determined by X.

Super Key : Set of attributes whose closure contains all the attributes of a relation.

* No prime attribute exists on the right side of the F.D (X->Y), then there exists only one candidate key.



How to find Candidate Keys / Super Keys / Primary Keys?

- Consider the attribute closure (X+) for all attributes in the the relation.
- Use Amstrong's axoims [Reflexive, Transitive, Augment, Union..]
- Apply rules considering   all FD's in the relation
- If an attribute or set of attributes derive all the attributes of the relation, it is the "Super Key". Find all the super keys involved by substituting the attribute in FD's.
- If a proper subset of any super key is not a super key, then that super key is considered as "Candidate Key"
- We can find all the candidate keys just by checking if any of the FD's have candidate key on RHS. (X -> Y). If Y be the candidate key, then we can substitute the X for Y and check if it satisfies the candidate key properties and confirm on it.
- Among all the candidate keys available, we choose one key as "Primary Key".
------------------------------------------------------------------------------------------------------------------------------------------------------------------
